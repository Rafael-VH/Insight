import 'package:insight/stats/domain/entities/player_stats.dart';

/// Resultado de la validaci√≥n de estad√≠sticas
class ValidationResult {
  final bool isValid;
  final List<String> missingFields;
  final List<String> warningFields;
  final int totalFields;
  final int validFields;

  const ValidationResult({
    required this.isValid,
    required this.missingFields,
    required this.warningFields,
    required this.totalFields,
    required this.validFields,
  });

  double get completionPercentage => (validFields / totalFields) * 100;

  String get summary {
    if (isValid && warningFields.isEmpty) {
      return '‚úì Todos los datos extra√≠dos correctamente';
    } else if (missingFields.isEmpty && warningFields.isNotEmpty) {
      return '‚ö† Datos extra√≠dos con advertencias (${warningFields.length} campos)';
    } else {
      return '‚úó Faltan ${missingFields.length} campos importantes';
    }
  }
}

/// Validador de estad√≠sticas
class StatsValidator {
  /// Valida las estad√≠sticas extra√≠das
  static ValidationResult validate(PlayerStats stats) {
    final List<String> missingFields = [];
    final List<String> warningFields = [];
    int totalFields = 0;
    int validFields = 0;

    // Validar estad√≠sticas principales (CR√çTICAS)
    totalFields += 3;
    if (stats.totalGames == 0) {
      missingFields.add('Partidas Totales');
    } else {
      validFields++;
    }

    if (stats.winRate == 0.0) {
      missingFields.add('Tasa de Victorias');
    } else {
      validFields++;
    }

    if (stats.mvpCount == 0) {
      warningFields.add('MVP (puede ser leg√≠timamente 0)');
      validFields++; // No es cr√≠tico
    } else {
      validFields++;
    }

    // Validar estad√≠sticas de rendimiento (IMPORTANTES)
    totalFields += 6;
    if (stats.kda == 0.0) {
      missingFields.add('KDA');
    } else {
      validFields++;
    }

    if (stats.teamFightParticipation == 0.0) {
      missingFields.add('Participaci√≥n en Equipo');
    } else {
      validFields++;
    }

    if (stats.goldPerMin == 0) {
      missingFields.add('Oro/Min');
    } else {
      validFields++;
    }

    if (stats.heroDamagePerMin == 0) {
      missingFields.add('DA√ëO a H√©roe/Min');
    } else {
      validFields++;
    }

    if (stats.deathsPerGame == 0.0) {
      warningFields.add('Muertes/Partida');
      validFields++;
    } else {
      validFields++;
    }

    if (stats.towerDamagePerGame == 0) {
      warningFields.add('Da√±o a Torre/Partida');
      validFields++;
    } else {
      validFields++;
    }

    // Validar logros (OPCIONALES - pueden ser 0 leg√≠timamente)
    totalFields += 13;
    final achievements = [
      ('Legendario', stats.legendary),
      ('Savage', stats.savage),
      ('Maniac', stats.maniac),
      ('Asesinato Triple', stats.tripleKill),
      ('Asesinato Doble', stats.doubleKill),
      ('MVP Perdedor', stats.mvpLoss),
      ('Asesinatos M√°x.', stats.maxKills),
      ('Asistencias M√°x.', stats.maxAssists),
      ('Racha de Victorias M√°x.', stats.maxWinningStreak),
      ('Primera Sangre', stats.firstBlood),
      ('Da√±o Causado M√°x./min', stats.maxDamageDealt),
      ('Da√±o Tomado M√°x./min', stats.maxDamageTaken),
      ('Oro M√°x./min', stats.maxGold),
    ];

    for (var achievement in achievements) {
      if (achievement.$2 == 0) {
        // Los logros pueden ser 0, pero vale la pena notarlo
        warningFields.add(achievement.$1);
      }
      validFields++; // Siempre contamos como v√°lido
    }

    // Un perfil es v√°lido si tiene al menos las estad√≠sticas cr√≠ticas
    final isValid = missingFields.isEmpty;

    return ValidationResult(
      isValid: isValid,
      missingFields: missingFields,
      warningFields: warningFields,
      totalFields: totalFields,
      validFields: validFields,
    );
  }

  /// Genera un mensaje detallado de error
  static String getDetailedErrorMessage(ValidationResult result) {
    final buffer = StringBuffer();

    if (result.missingFields.isNotEmpty) {
      buffer.writeln('‚ùå DATOS FALTANTES (${result.missingFields.length}):');
      for (var field in result.missingFields) {
        buffer.writeln('  ‚Ä¢ $field');
      }
    }

    if (result.warningFields.isNotEmpty) {
      if (buffer.isNotEmpty) buffer.writeln();
      buffer.writeln('‚ö†Ô∏è ADVERTENCIAS (${result.warningFields.length}):');
      buffer.writeln('Los siguientes campos est√°n en 0:');
      for (var field in result.warningFields.take(5)) {
        // Mostrar solo los primeros 5
        buffer.writeln('  ‚Ä¢ $field');
      }
      if (result.warningFields.length > 5) {
        buffer.writeln('  ... y ${result.warningFields.length - 5} m√°s');
      }
    }

    buffer.writeln();
    buffer.writeln(
      'üìä Completitud: ${result.completionPercentage.toStringAsFixed(1)}%',
    );

    return buffer.toString();
  }

  /// Genera recomendaciones para mejorar la captura
  static List<String> getRecommendations(ValidationResult result) {
    final recommendations = <String>[];

    if (result.missingFields.isNotEmpty) {
      recommendations.add(
        'üì∏ Aseg√∫rate de que la imagen muestre claramente todas las estad√≠sticas',
      );
      recommendations.add(
        'üí° Intenta tomar la captura con buena iluminaci√≥n y sin reflejos',
      );
      recommendations.add(
        'üîç Verifica que el texto sea legible y no est√© borroso',
      );
    }

    if (result.completionPercentage < 50) {
      recommendations.add(
        '‚ö†Ô∏è Se detectaron muy pocos datos. Considera volver a tomar la captura',
      );
    }

    return recommendations;
  }
}
